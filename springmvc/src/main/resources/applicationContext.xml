<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

    <!--扫描指定包下有注解的类，将这些类注册为bean，在需要的时候进行注入-->
    <!--<context:component-scan base-package="com.test"/>-->
    <context:component-scan base-package="com.test">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>



    <!--创建数据库连接池，从连接池中获取数据源 （spring-jdbc） -->
    <context:property-placeholder location="classpath:db.properties" />
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="maxActive" value="10" />
        <property name="minIdle" value="5" />
    </bean>



    <!--spring整合mybatis  创建SqlSessionFactory，同时指定数据源（sqlSession 用于执行sql） -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mappers.xml文件 -->
        <property name="mapperLocations" value="classpath:com/test/mapper/*.xml" />
        <!-- 加载mybatis的全局配置文件 -->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml" />-->
    </bean>
    <!-- DAO接口所在包名，实例化dao接口实现类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.test.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>



    <!-- 事务管理器 -->
   <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置AOP通知 &ndash;&gt;-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--&lt;!&ndash; 配置事务属性 &ndash;&gt;-->
        <!--<tx:attributes>-->
            <!--&lt;!&ndash; 添加事务管理的方法 &ndash;&gt;-->
            <!--<tx:method name="save*" propagation="REQUIRED"/>-->
            <!--<tx:method name="delete*" propagation="REQUIRED"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED"/>-->
            <!--<tx:method name="select*" read-only="true"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--&lt;!&ndash; 配置AOP，为添加事务管理的操作配置AOP &ndash;&gt;-->
    <!--<aop:config>-->
        <!--&lt;!&ndash; 引入的Spring定义的事务通知，需要使用aop:advisor &ndash;&gt;-->
        <!--&lt;!&ndash; 下面难 &ndash;&gt;-->
        <!--<aop:advisor advice-ref="txAdvice"-->
                     <!--pointcut="execution(* com.edu.test.service.*.*(..))"-->
        <!--/>-->
    <!--</aop:config>-->
</beans>